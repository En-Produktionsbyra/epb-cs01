# label_generator.py

import os
import qrcode
import logging
from PIL import Image, ImageDraw, ImageFont
from typing import Dict, List, Tuple
import sys 
from datetime import datetime

from constants import FONT_PATHS, LABEL_DPI, SYSTEM_AND_HIDDEN_FOLDERS
from utils import get_text_size_global, get_preferred_font, is_system_or_hidden_folder, draw_wrapped_text # Keep draw_wrapped_text for title or future use if needed, but not for list items

logger = logging.getLogger(__name__)

# Kontrollera om label-st√∂d finns
try:
    import qrcode
    from PIL import Image, ImageDraw, ImageFont
    HAS_LABEL_SUPPORT = True
except ImportError:
    HAS_LABEL_SUPPORT = False
    logger.warning("‚ö†Ô∏è F√∂r label-generering: pip install qrcode[pil] pillow")

def simulate_customer_list_rendering(customer_folders: List[str], font: ImageFont.FreeTypeFont, draw_obj: ImageDraw.ImageDraw, line_spacing: float = 1.2) -> int:
    """
    Simulera renderingen av kundlistan f√∂r att ber√§kna total h√∂jd den kommer att ta,
    utan automatisk radbrytning per mapp. Varje mapp antas vara en egen rad.
    """
    total_height = 0
    
    # Borttaget: Ber√§kning av h√∂jd f√∂r "Kunder:"-rubriken
    
    # Ungef√§rlig radh√∂jd (med 'A') f√∂r konsekvent avst√•ndsber√§kning
    approx_line_height = draw_obj.textbbox((0, 0), "A", font=font)[3] - draw_obj.textbbox((0, 0), "A", font=font)[1]

    for folder in customer_folders:
        total_height += approx_line_height * line_spacing + 2 # L√§gg till h√∂jd f√∂r varje rad och en liten marginal
            
    return total_height


def ask_for_customer_level(tree_structure: Dict) -> List[str]:
    """
    Fr√•gar anv√§ndaren om kundniv√• och returnerar en lista med kundmappar.
    Om koden k√∂rs utan en interaktiv terminal, v√§ljs toppkatalogen automatiskt.
    """
    customer_folders = []
    
    # Identifiera toppniv√•mappar som inte √§r systemmappar
    top_level_dirs = sorted([
        name for name, content in tree_structure.items() 
        if isinstance(content, dict) and not is_system_or_hidden_folder(name)
    ])
    
    if not top_level_dirs:
        logger.info("Inga synliga toppkataloger hittades f√∂r kundlista.")
        return []

    if not sys.stdin.isatty(): 
        logger.info("K√∂rs utan interaktiv terminal. V√§ljer toppkatalogen som kundniv√•.")
        # Om det bara finns en synlig toppniv√•mapp, v√§lj den
        if len(top_level_dirs) == 1:
            customer_folders = [top_level_dirs[0]]
            logger.info(f"Automatisk val av kundniv√•: '{top_level_dirs[0]}'")
        else:
            # Om flera toppniv√•mappar finns och vi inte √§r interaktiva, inkludera dem alla
            customer_folders = top_level_dirs
            logger.info(f"Automatisk val av kundniv√•: Alla toppniv√•kataloger: {', '.join(top_level_dirs)}")
        return customer_folders


    print("\n--- V√§lj kundniv√• ---")
    print("V√§nligen ange vilken mapp som representerar 'kundniv√•n'.")
    print("Detta kommer att anv√§ndas f√∂r att generera en lista √∂ver kundmappar p√• etiketten.")
    print("Ange numret f√∂r √∂nskad mapp, eller '0' f√∂r att hoppa √∂ver kundlista.")
    print("Om '0' anges, kommer rotkatalogen f√∂r disken att anv√§ndas f√∂r etiketten.")
    print("Om du vill ha en lista √∂ver mappar p√• den *f√∂rsta* niv√•n, v√§lj '0'.") # F√∂rtydligande

    
    while True:
        print("\nTillg√§ngliga toppkataloger:")
        for i, folder in enumerate(top_level_dirs):
            print(f"{i+1}. {folder}")
        
        print("0. (Ingen specifik kundniv√• - anv√§nd toppkatalogerna direkt p√• etiketten)")

        choice = input("Ditt val (nummer): ").strip()

        if choice == '0':
            # Om anv√§ndaren v√§ljer 0, anv√§nds toppkatalogerna som kundlista
            customer_folders = top_level_dirs
            logger.info("Anv√§ndaren valde att lista toppkataloger som kundniv√•.")
            break
        elif choice.isdigit():
            idx = int(choice) - 1
            if 0 <= idx < len(top_level_dirs):
                selected_folder = top_level_dirs[idx]
                customer_folders = [selected_folder]
                logger.info(f"Anv√§ndaren valde kundniv√•: '{selected_folder}'")
                
                # Nu, om den valda mappen har undermappar, fr√•ga om att inkludera dessa
                if selected_folder in tree_structure and isinstance(tree_structure[selected_folder], dict):
                    sub_dirs = sorted([
                        name for name, content in tree_structure[selected_folder].items()
                        if isinstance(content, dict) and not is_system_or_hidden_folder(name)
                    ])
                    if sub_dirs:
                        include_sub_dirs = input(f"Vill du inkludera undermapparna i '{selected_folder}' som kunder? (ja/nej): ").strip().lower()
                        if include_sub_dirs == 'ja':
                            customer_folders = [os.path.join(selected_folder, sd) for sd in sub_dirs]
                            logger.info(f"Inkluderar undermappar som kunder som kunder fr√•n '{selected_folder}'.")
                        else:
                            customer_folders = [selected_folder] # Bara den valda mappen
                            logger.info(f"Inkluderar endast den valda mappen '{selected_folder}' som kund.")
                break
            else:
                print("Ogiltigt val. V√§nligen ange ett giltigt nummer.")
        else:
            print("Ogiltigt val. V√§nligen ange ett nummer.")
            
    return customer_folders

def generate_disk_label(disk_name: str, tree_data: Dict, output_file: str, disk_safe_name: str) -> Tuple[str, str]:
    """
    Genererar en fysisk etikett (QR-kod + text) f√∂r disken.
    Returnerar filnamnen f√∂r den skapade huvudetiketten och header-etiketten.
    """
    if not HAS_LABEL_SUPPORT:
        logger.warning("‚ö†Ô∏è Label-generering √§r inaktiverad p√• grund av saknade beroenden (qrcode[pil] pillow).")
        return None, None

    logger.info("üöÄ Genererar fysisk etikett...")

    # QR-koddata qr_url = 
    qr_data = f"https://coldstorage.enproduktionsbyra.se/disks/{disk_safe_name}"

    # Skapa QR-kod
    qr = qrcode.QRCode(
        version=None,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=0,
    )   
    qr.add_data(qr_data)
    qr.make(fit=True)
    qr_img = qr.make_image(fill_color="black", back_color="white")
    logger.info("‚úÖ QR-kod genererad.")

    # Etikettens dimensioner (A4 - 210x297 mm, f√∂r 300 DPI, ca 2480x3508 px, justerat f√∂r label)
    # V√•r etikett √§r 100x70 mm @ 300 DPI = 1181 x 827 pixlar
    LABEL_WIDTH_PX = int(50 / 25.4 * LABEL_DPI)  # 100 mm till pixlar
    LABEL_HEIGHT_PX = int(80 / 25.4 * LABEL_DPI) # 70 mm till pixlar
    
    img = Image.new('RGB', (LABEL_WIDTH_PX, LABEL_HEIGHT_PX), 'white')
    draw = ImageDraw.Draw(img)

    # Margins
    page_margin = 20
    
    # --- Centrerad rubrik h√∂gst upp (Disknamn) ---
    title_font_size = 60 # Stor initial fontstorlek
    title_font = get_preferred_font(title_font_size)
    
    # Skala disknamnsfont om den √§r f√∂r stor
    max_title_width = LABEL_WIDTH_PX - 2 * page_margin
    while title_font and get_text_size_global(disk_name, title_font, draw)[0] > max_title_width and title_font_size > 20:
        title_font_size -= 2
        title_font = get_preferred_font(title_font_size)

    if title_font is None:
        title_font = get_preferred_font(30) # Fallback
        logger.warning("‚ö†Ô∏è Anv√§nder fallback font f√∂r disknamn, kanske inte optimalt.")
        
    title_bbox = draw.textbbox((0, 0), disk_name, font=title_font)
    title_width = title_bbox[2] - title_bbox[0]
    title_height = title_bbox[3] - title_bbox[1]

    title_x = (LABEL_WIDTH_PX - title_width) // 2
    title_y = page_margin
    
    if title_font:
        draw.text((title_x, title_y), disk_name, fill='black', font=title_font)
        logger.info("‚úÖ Huvudetikett disknamn placerat i mitten h√∂gst upp.")
    else:
        logger.error("‚ùå Kunde inte ladda n√•gon font f√∂r disknamn.")

    current_y_after_title = title_y + title_height + page_margin # Start Y f√∂r kolumnerna

    # --- Tv√• kolumner direkt under rubriken ---
    column_area_height = LABEL_HEIGHT_PX - current_y_after_title - page_margin
    
    # V√§nster kolumn (2/3 bredd)
    left_column_width = int(LABEL_WIDTH_PX * (2/3)) - page_margin * 2 # Justera f√∂r padding
    left_column_x = page_margin
    
    # H√∂ger kolumn (1/3 bredd)
    right_column_width = LABEL_WIDTH_PX - left_column_width - page_margin * 2
    right_column_x = left_column_x + left_column_width + page_margin * 2

    # --- Placera QR-kod (H√∂ger kolumn) ---
    # QR-koden ska vara 1/3 av sidans bredd och lika h√∂g som den √§r bred
    # Begr√§nsas av h√∂ger kolumns bredd och tillg√§nglig kolumnh√∂jd
    qr_target_size = min(int(LABEL_WIDTH_PX / 3), column_area_height) 
    
    # Justera f√∂r marginaler inuti kolumnen
    qr_size_with_margin = qr_target_size - page_margin
    
    # QR-koden linjerar nu med toppen av kundlistan
    qr_x_in_column = right_column_x - page_margin + (right_column_width - qr_size_with_margin) // 2
    qr_y_in_column = current_y_after_title # Linjera med toppen av kundlistan
    
    qr_img_resized = qr_img.resize((qr_size_with_margin, qr_size_with_margin), Image.Resampling.LANCZOS)
    img.paste(qr_img_resized, (qr_x_in_column, qr_y_in_column))
    logger.info("‚úÖ QR-kod placerad i h√∂ger kolumn och linjerad med f√∂rsta kundposten.")

    # --- Kundlista (V√§nster kolumn) ---
    customer_list_max_height = column_area_height
    customer_list_font_size = 200 # Initial font size

    customer_folders = ask_for_customer_level(tree_data['tree'])
    
    customer_list_font = get_preferred_font(customer_list_font_size)
    
    if customer_folders:
        # Hitta den l√§ngsta mappen f√∂r breddkontroll (utan bullet point)
        longest_display_text = ""
        for folder in customer_folders:
            # display_text = f"‚Ä¢ {folder}" # Borttagen bullet point
            display_text = folder
            if len(display_text) > len(longest_display_text):
                longest_display_text = display_text

        # Skala font f√∂r kundlista om det beh√∂vs
        while customer_list_font and customer_list_font_size > 8: # Beh√•ll en nedre gr√§ns f√∂r fontstorlek
            current_total_height = simulate_customer_list_rendering(customer_folders, customer_list_font, draw)
            current_max_folder_width = get_text_size_global(longest_display_text, customer_list_font, draw)[0]
            
            if current_total_height > customer_list_max_height or current_max_folder_width > left_column_width:
                logger.warning(f"‚ö†Ô∏è Fontstorlek {customer_list_font_size} f√∂r kundlista f√∂r stor. Minskar...")
                customer_list_font_size -= 1
                customer_list_font = get_preferred_font(customer_list_font_size)
            else:
                break # Fontstorleken √§r bra
        
        # Fallback om loopen avslutas utan en l√§mplig font
        if customer_list_font is None:
            customer_list_font = get_preferred_font(8)
            logger.warning("‚ö†Ô∏è Anv√§nder fallback font (8px) f√∂r kundlista efter skalning.")

        # Rita kundlistan utan radbrytning per mapp och utan rubrik
        if customer_list_font:
            current_y_customer_list = current_y_after_title # Start Y f√∂r kundlistan

            # Borttaget: Rita rubriken "Kunder:"
            
            # Ungef√§rlig radh√∂jd f√∂r konsekvent avst√•nd, som ber√§knats i simuleringen
            approx_line_height = draw.textbbox((0, 0), "A", font=customer_list_font)[3] - draw.textbbox((0, 0), "A", font=customer_list_font)[1]
            line_spacing_factor = 1.5 # Matchar v√§rdet som anv√§nds i simuleringen

            for folder in customer_folders:
                # Borttagen bullet point
                # display_text = f"‚Ä¢ {folder}"
                display_text = folder
                draw.text((left_column_x, current_y_customer_list), display_text, fill='black', font=customer_list_font) # Justerad x-position
                current_y_customer_list += approx_line_height * line_spacing_factor + 2 # Liten marginal mellan kundposter
            logger.info(f"‚úÖ Kundlista placerad utan radbrytning och bullet points ({len(customer_folders)} poster).")
        else:
            logger.error("‚ùå Kunde inte ladda n√•gon font f√∂r kundlista.")
    else:
        logger.info("Ingen kundlista att placera p√• etiketten.")

    # === Generera Header-etikett ===
    # En smalare etikett, t.ex. 80x50 mm f√∂r header (F√ñRE rotation)
    HEADER_WIDTH_PX = int(80 / 25.4 * LABEL_DPI)
    HEADER_HEIGHT_PX = int(50 / 25.4 * LABEL_DPI)
    
    header = Image.new('RGB', (HEADER_WIDTH_PX, HEADER_HEIGHT_PX), 'white')
    drawHeader = ImageDraw.Draw(header)
    
    header_margin = 10 # Marginal f√∂r elementen inuti headern
    
    # --- Placera QR-kod p√• header-etiketten ---
    # Storlek p√• QR-koden p√• headern, t.ex. 50/3 mm eller 1/3 av HEADER_HEIGHT_PX
    # Din instruktion: "qr koden ska vara 50 / 3" - antar du menar av de 50mm (HEADER_HEIGHT_PX)
    # S√•, QR-kodens sida blir HEADER_HEIGHT_PX / 3
    qr_header_px = int(HEADER_HEIGHT_PX / 3) 
    # S√§kerst√§ll att den inte blir f√∂r liten
    qr_header_px = max(20, qr_header_px) 

    # QR-kodens position p√• den OR√ñRDA header-etiketten (h√∂gerst√§lld, centrerad vertikalt)
    qr_header_x = HEADER_WIDTH_PX - qr_header_px - header_margin 
    qr_header_y = header_margin
    
    qr_header_resized = qr_img.resize((qr_header_px, qr_header_px), Image.Resampling.LANCZOS)
    header.paste(qr_header_resized, (qr_header_x, qr_header_y))
    logger.info(f"‚úÖ QR-kod placerad p√• header-etiketten med storlek: {qr_header_px}x{qr_header_px} pixlar.")

    # --- Skala och placera texten p√• headern ---
    disk_name_header = disk_name # Anv√§nd safe_name f√∂r header

    # Tillg√§ngligt utrymme f√∂r texten p√• den OR√ñRDA header-etiketten
    # Texten placeras till v√§nster om QR-koden.
    text_available_width = qr_header_x - (header_margin * 2) # Utrymme fr√•n v√§nster marginal till QR-kodens start
    text_available_height = HEADER_HEIGHT_PX - (header_margin * 2) # H√∂jd f√∂r texten

    # Skalningslogik: B√∂rja med en liten font och √∂ka tills den fyller utrymmet eller blir f√∂r stor
    # Detta √§r att "maximera" textstorleken.
    header_font_size = 8 # B√∂rja med en liten fontstorlek
    header_optimal_font = get_preferred_font(header_font_size)
    
    # Loop f√∂r att v√§xa fontstorleken
    while True:
        # F√∂rs√∂k med n√§sta st√∂rre fontstorlek
        next_font_size = header_font_size + 1
        test_font = get_preferred_font(next_font_size)
        
        # Om vi inte kan ladda en st√∂rre font, eller om fontstorleken blir orimligt stor, avbryt
        if test_font is None or next_font_size > 200: # Max 200px f√∂r att undvika o√§ndlig loop med vissa fonter
            break
        
        # F√• dimensionerna f√∂r texten med den TESTade fontstorleken
        test_text_w, test_text_h = get_text_size_global(disk_name_header, test_font, drawHeader)
        
        # Kontrollera om texten med den N√ÑSTA fontstorleken blir f√∂r bred ELLER f√∂r h√∂g
        if test_text_w > text_available_width or test_text_h > text_available_height:
            break # Om den blir f√∂r stor, anv√§nd den F√ñREG√ÖENDE (aktuella) fontstorleken
        
        # Om den ryms, uppdatera till den st√∂rre fontstorleken och forts√§tt
        header_font_size = next_font_size
        header_optimal_font = test_font
    
    # Om header_optimal_font fortfarande √§r None (ingen font kunde laddas alls)
    # Detta √§r en fallback om get_preferred_font aldrig lyckas, eller om initiala fontstorleken inte ens ryms
    if header_optimal_font is None:
        header_optimal_font = get_preferred_font(8) # Anv√§nd en minsta fallback font
        if header_optimal_font is None: # Sista utv√§gen
            logger.error("‚ùå Kunde inte ladda n√•gon font f√∂r header-text, ens fallback.")
            return None, None
        logger.warning("‚ö†Ô∏è Anv√§nder fallback font (8px) f√∂r header-text efter skalning.")

    # Ber√§kna textens faktiska dimensioner med den optimala fonten som hittades
    text_w, text_h = get_text_size_global(disk_name_header, header_optimal_font, drawHeader)
    
    # Centrera texten vertikalt inom dess tillg√§ngliga h√∂jd
    header_text_x = header_margin
    header_text_y = (qr_header_px / 2) - (text_h / 2)
    
    drawHeader.text((header_text_x, header_text_y), disk_name_header, fill='black', font=header_optimal_font)
    logger.info(f"‚úÖ Header-etikett disknamn '{disk_name_header}' placerat (font: {header_font_size}px, bredd: {text_w}px, h√∂jd: {text_h}px).")

    # Rotera header 90 grader f√∂r utskrift
    header_rotated = header.rotate(-90, expand=True)
    logger.info("‚úÖ Header roterad 90¬∞ f√∂r utskrift.")

    # === SPARA B√ÖDA LABELS ===
    try:
        label_file_main = output_file.replace('.json', '_label_main.jpg') 
        img.save(label_file_main, 'JPEG', dpi=(LABEL_DPI, LABEL_DPI), quality=95) 
        
        label_file_header = output_file.replace('.json', '_label_header.jpg')
        header_rotated.save(label_file_header, 'JPEG', dpi=(LABEL_DPI, LABEL_DPI), quality=95)
        
        if os.path.exists(label_file_main):
            logger.info(f"‚úÖ Main label sparad: {label_file_main}")
        
        if os.path.exists(label_file_header):
            logger.info(f"‚úÖ Header label sparad: {label_file_header}")
        
        return label_file_main, label_file_header
            
    except Exception as e:
        logger.error(f"‚ùå Fel vid sparande av etiketter: {e}", exc_info=True)
        return None, None