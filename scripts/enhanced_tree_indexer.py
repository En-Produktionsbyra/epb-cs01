#!/usr/bin/env python3
"""
Optimized Tree Indexer f√∂r Cold Storage v2 - FIXED VERSION
Skapar JSON-struktur som √§r perfekt f√∂r import till directories-tabellen
Fixar: QR-kod generering och alfabetisk sortering av kundlista
"""

import os
import json
import argparse
import pickle
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Tuple
import re
import sys
from collections import deque

# F√∂r QR-kod och label-generering
try:
    import qrcode
    from PIL import Image, ImageDraw, ImageFont
    HAS_LABEL_SUPPORT = True
except ImportError:
    HAS_LABEL_SUPPORT = False
    print("‚ö†Ô∏è F√∂r label-generering: pip install qrcode[pil] pillow")

try:
    from tqdm import tqdm
    HAS_TQDM = True
except ImportError:
    HAS_TQDM = False
    print("‚ö†Ô∏è Installera 'tqdm' f√∂r progressbar: pip install tqdm")

class OptimizedTreeIndexer:
    def __init__(self):
        self.version = "2.1.1"  # Uppdaterad version
        self.checkpoint_file = None
        self.progress_bar = None
        
    def determine_file_type(self, extension: str) -> str:
        """Best√§m fil-kategori baserat p√• extension"""
        if not extension:
            return 'other'
            
        ext = extension.lower().lstrip('.')
        
        # Bilder (inklusive RAW)
        if ext in ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'tiff', 'tif', 'webp', 'svg',
                   'cr2', 'cr3', 'nef', 'arw', 'dng', 'iiq', '3fr', 'orf', 'rw2', 'pef']:
            return 'image'
        
        # Video
        elif ext in ['mp4', 'avi', 'mov', 'mkv', 'wmv', 'flv', 'webm', 'm4v', 'mpg', 'mpeg',
                     'r3d', 'braw', 'mxf', 'prores']:
            return 'video'
        
        # Audio
        elif ext in ['mp3', 'wav', 'flac', 'aac', 'ogg', 'wma', 'aiff', 'aif', 'm4a']:
            return 'audio'
        
        # Dokument
        elif ext in ['pdf', 'doc', 'docx', 'txt', 'rtf', 'odt', 'pages', 'ai', 'eps', 'indd', 'psd']:
            return 'document'
        
        # Arkiv
        elif ext in ['zip', 'rar', '7z', 'tar', 'gz', 'bz2', 'xz', 'dmg', 'iso']:
            return 'archive'
        
        # Kod/Data
        elif ext in ['js', 'jsx', 'ts', 'tsx', 'html', 'css', 'json', 'xml', 'yml', 'yaml', 
                     'py', 'java', 'cpp', 'c', 'h', 'sql']:
            return 'code'
        
        else:
            return 'other'
        
    def scan_directory_tree(self, root_path: str, output_file: str = None, 
                           include_extensions: List[str] = None,
                           exclude_patterns: List[str] = None,
                           resume: bool = True,
                           checkpoint_interval: int = 1000) -> Dict:
        """
        Scanna katalogtr√§d optimerat f√∂r Cold Storage v2
        """
        
        if not os.path.exists(root_path):
            raise FileNotFoundError(f"S√∂kv√§g finns inte: {root_path}")
        
        # Setup checkpoint fil
        if output_file:
            self.checkpoint_file = output_file.replace('.json', '_checkpoint.pkl')
        else:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            output_file = f"tree_structure_{timestamp}.json"
            self.checkpoint_file = f"tree_structure_{timestamp}_checkpoint.pkl"
        
        print(f"üìÅ Optimized Tree Indexer v{self.version}")
        print(f"üìÇ Skannar: {root_path}")
        print(f"üíæ Output: {output_file}")
        print(f"üîÑ Checkpoint: {self.checkpoint_file}")
        print(f"‚è∞ Starttid: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # Default file extensions (bred t√§ckning f√∂r foto/video-arkiv)
        if include_extensions is None:
            include_extensions = [
                # RAW foto
                '.cr2', '.cr3', '.nef', '.arw', '.dng', '.iiq', '.3fr', '.orf', '.rw2', '.pef',
                # Standard foto
                '.jpg', '.jpeg', '.png', '.tiff', '.tif', '.psd', '.gif', '.bmp', '.webp',
                # Video
                '.mp4', '.mov', '.avi', '.r3d', '.braw', '.mxf', '.mkv', '.wmv', '.m4v',
                # Audio
                '.wav', '.aiff', '.mp3', '.flac', '.aac', '.m4a',
                # Dokument
                '.pdf', '.ai', '.eps', '.indd', '.doc', '.docx'
            ]
        
        # Default exclude patterns
        if exclude_patterns is None:
            exclude_patterns = [
                r'\.DS_Store$',
                r'Thumbs\.db$', 
                r'\.tmp$',
                r'\.temp$',
                r'/\.',  # Dolda mappar
                r'__MACOSX',
                r'System Volume Information',
                r'\$RECYCLE\.BIN',
                r'\.Spotlight-V100',
                r'\.Trashes',
                r'\.fseventsd'
            ]
        
        # Kompilera exclude patterns
        exclude_regexes = [re.compile(pattern, re.IGNORECASE) for pattern in exclude_patterns]
        
        # F√∂rs√∂k √•teruppta fr√•n checkpoint
        if resume and os.path.exists(self.checkpoint_file):
            print(f"üîÑ Hittade checkpoint - √•terupptar scanning...")
            try:
                with open(self.checkpoint_file, 'rb') as f:
                    checkpoint_data = pickle.load(f)
                
                tree_data = checkpoint_data['tree_data']
                processed_paths = checkpoint_data['processed_paths']
                start_time = checkpoint_data['start_time']
                
                print(f"üìä √Öterupptar fr√•n: {len(processed_paths)} processade s√∂kv√§gar")
                print(f"üìÑ Redan: {tree_data['statistics']['total_files']} filer, {tree_data['statistics']['total_directories']} mappar")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Kunde inte l√§sa checkpoint: {e}")
                print("üîÑ Startar fr√•n b√∂rjan...")
                tree_data, processed_paths, start_time = self._initialize_scan_data(
                    root_path, include_extensions, exclude_patterns
                )
        else:
            tree_data, processed_paths, start_time = self._initialize_scan_data(
                root_path, include_extensions, exclude_patterns
            )
        
        # Utf√∂r scanning niv√• f√∂r niv√•
        try:
            self._scan_level_by_level(
                root_path, 
                tree_data, 
                processed_paths,
                include_extensions, 
                exclude_regexes,
                checkpoint_interval
            )
            
        except KeyboardInterrupt:
            print(f"\n‚ö†Ô∏è Avbrutet av anv√§ndaren - sparar checkpoint...")
            self._save_checkpoint(tree_data, processed_paths, start_time)
            raise
        
        # Slutstatistik
        end_time = datetime.now()
        tree_data['statistics']['scan_duration_seconds'] = (end_time - start_time).total_seconds()
        
        if self.progress_bar:
            self.progress_bar.close()
        
        print(f"\n‚úÖ Scanning slutf√∂rd!")
        print(f"üìä Slutstatistik:")
        print(f"   üìÅ {tree_data['statistics']['total_directories']} mappar")
        print(f"   üìÑ {tree_data['statistics']['total_files']} filer")
        print(f"   üìè Djup: {tree_data['statistics']['max_depth']} niv√•er")
        print(f"   ‚è±Ô∏è  Tid: {tree_data['statistics']['scan_duration_seconds']:.1f} sekunder")
        
        # Visa filtyp-f√∂rdelning
        if tree_data['statistics']['file_types']:
            print(f"   üìã Filtyper:")
            sorted_types = sorted(
                tree_data['statistics']['file_types'].items(), 
                key=lambda x: x[1], 
                reverse=True
            )
            for ftype, count in sorted_types:
                print(f"      {ftype}: {count:,} filer")
        
        # Spara slutresultat
        self._save_tree_data(tree_data, output_file)
        
        return tree_data
    
    def _initialize_scan_data(self, root_path: str, include_extensions: List[str], 
                             exclude_patterns: List[str]) -> Tuple[Dict, set, datetime]:
        """Initialisera scan-data med optimerad struktur"""
        
        tree_data = {
            'scan_info': {
                'root_path': root_path,
                'scan_date': datetime.now().isoformat(),
                'scanner': 'OptimizedTreeIndexer',
                'version': self.version,
                'include_extensions': include_extensions,
                'exclude_patterns': exclude_patterns,
                'optimized_for': 'Cold Storage v2 with directories table'
            },
            'statistics': {
                'total_files': 0,
                'total_directories': 0,
                'file_extensions': {},
                'file_types': {},  # NY: kategoriserade filtyper
                'max_depth': 0,
                'largest_file': {'name': '', 'size': 0},
                'scan_duration_seconds': 0,
                'directory_depth_distribution': {}  # NY: f√∂rdelning av djup-niv√•er
            },
            'tree': {
                'type': 'directory',
                'name': os.path.basename(root_path) or root_path,
                'path': root_path,
                'relative_path': '',  # NY: relativ s√∂kv√§g fr√•n root
                'parent_path': None,  # NY: f√∂r√§lder-s√∂kv√§g
                'depth': 0,  # NY: djup-niv√•
                'children': {},
                'files': [],
                'metadata': {
                    'depth': 0,
                    'file_count': 0,
                    'subdirectory_count': 0,
                    'total_size': 0  # NY: total storlek i denna mapp
                }
            }
        }
        
        processed_paths = set()
        start_time = datetime.now()
        
        return tree_data, processed_paths, start_time
    
    def _scan_level_by_level(self, root_path: str, tree_data: Dict, processed_paths: set,
                            include_extensions: List[str], exclude_regexes: List,
                            checkpoint_interval: int):
        """
        Scanna katalogtr√§d niv√• f√∂r niv√• med progressbar
        """
        
        # F√∂rsta: r√§kna totalt antal kataloger f√∂r progressbar
        print("üî¢ R√§knar totalt antal kataloger...")
        total_dirs = self._count_total_directories(root_path, exclude_regexes)
        print(f"üìä Totalt {total_dirs:,} kataloger att processa")
        
        # Skapa progressbar
        if HAS_TQDM:
            self.progress_bar = tqdm(
                total=total_dirs,
                desc="Scannar kataloger",
                unit="dir",
                bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]"
            )
        
        # K√∂ f√∂r niv√•-f√∂r-niv√• scanning
        current_level = deque([(root_path, tree_data['tree'], 0, '')])  # (full_path, tree_node, depth, relative_path)
        checkpoint_counter = 0
        
        while current_level:
            next_level = deque()
            
            # Processa alla kataloger p√• nuvarande niv√•
            while current_level:
                dir_path, tree_node, depth, relative_path = current_level.popleft()
                
                # Hoppa √∂ver om redan processad
                if dir_path in processed_paths:
                    if HAS_TQDM and self.progress_bar:
                        self.progress_bar.update(1)
                    continue
                
                # Processa denna katalog
                self._process_directory(
                    dir_path, tree_node, depth, relative_path,
                    include_extensions, exclude_regexes,
                    tree_data['statistics'], next_level
                )
                
                processed_paths.add(dir_path)
                checkpoint_counter += 1
                
                # Uppdatera progressbar
                if HAS_TQDM and self.progress_bar:
                    self.progress_bar.set_postfix({
                        'filer': f"{tree_data['statistics']['total_files']:,}",
                        'djup': depth,
                        'typer': len(tree_data['statistics']['file_types'])
                    })
                    self.progress_bar.update(1)
                
                # Spara checkpoint
                if checkpoint_counter >= checkpoint_interval:
                    self._save_checkpoint(tree_data, processed_paths, datetime.now())
                    checkpoint_counter = 0
            
            # N√§sta niv√• blir nuvarande niv√•
            current_level = next_level
    
    def _count_total_directories(self, root_path: str, exclude_regexes: List) -> int:
        """R√§kna totalt antal kataloger (f√∂r progressbar)"""
        
        total = 0
        stack = [root_path]
        
        while stack:
            current_path = stack.pop()
            
            # Kontrollera exclude patterns
            if any(regex.search(current_path) for regex in exclude_regexes):
                continue
            
            try:
                items = os.listdir(current_path)
                total += 1
                
                for item in items:
                    item_path = os.path.join(current_path, item)
                    
                    if any(regex.search(item_path) for regex in exclude_regexes):
                        continue
                    
                    if os.path.isdir(item_path):
                        stack.append(item_path)
                        
            except (PermissionError, OSError):
                total += 1
                continue
        
        return total
    
    def _process_directory(self, dir_path: str, tree_node: Dict, depth: int, relative_path: str,
                          include_extensions: List[str], exclude_regexes: List,
                          statistics: Dict, next_level: deque):
        """
        Processa en enskild katalog med optimerad metadata
        """
        
        # Uppdatera max djup och djup-f√∂rdelning
        statistics['max_depth'] = max(statistics['max_depth'], depth)
        if depth not in statistics['directory_depth_distribution']:
            statistics['directory_depth_distribution'][depth] = 0
        statistics['directory_depth_distribution'][depth] += 1
        
        try:
            items = os.listdir(dir_path)
        except PermissionError:
            if not HAS_TQDM:
                print(f"‚ö†Ô∏è Ingen √•tkomst till: {dir_path}")
            return
        except Exception as e:
            if not HAS_TQDM:
                print(f"‚ùå Fel vid l√§sning av {dir_path}: {e}")
            return
        
        # Sortera items
        items.sort()
        
        total_size = 0
        
        for item in items:
            item_path = os.path.join(dir_path, item)
            
            # Kontrollera exclude patterns
            if any(regex.search(item_path) for regex in exclude_regexes):
                continue
            
            if os.path.isdir(item_path):
                # Skapa mapp-nod med optimerad struktur
                child_relative_path = f"{relative_path}/{item}" if relative_path else item
                
                child_node = {
                    'type': 'directory',
                    'name': item,
                    'path': item_path,
                    'relative_path': child_relative_path,  # NY: relativ s√∂kv√§g
                    'parent_path': relative_path if relative_path else None,  # NY: f√∂r√§lder
                    'depth': depth + 1,  # NY: djup-niv√•
                    'children': {},
                    'files': [],
                    'metadata': {
                        'depth': depth + 1,
                        'file_count': 0,
                        'subdirectory_count': 0,
                        'total_size': 0
                    }
                }
                
                tree_node['children'][item] = child_node
                tree_node['metadata']['subdirectory_count'] += 1
                statistics['total_directories'] += 1
                
                # L√§gg till i n√§sta niv√•
                next_level.append((item_path, child_node, depth + 1, child_relative_path))
                
            elif os.path.isfile(item_path):
                # Processa fil
                file_size = self._process_file(
                    item, item_path, relative_path, include_extensions,
                    tree_node, statistics
                )
                total_size += file_size
        
        # Uppdatera total storlek f√∂r denna mapp
        tree_node['metadata']['total_size'] = total_size
    
    def _process_file(self, filename: str, file_path: str, relative_dir_path: str,
                     include_extensions: List[str], tree_node: Dict, 
                     statistics: Dict) -> int:
        """
        Processa en enskild fil med optimerad metadata
        """
        
        file_ext = Path(filename).suffix.lower()
        
        # Kontrollera filextension
        if include_extensions and file_ext not in include_extensions:
            return 0
        
        try:
            file_stat = os.stat(file_path)
            file_size = file_stat.st_size
            
            # Best√§m filtyp
            file_type = self.determine_file_type(file_ext)
            
            # Uppdatera statistik
            statistics['total_files'] += 1
            tree_node['metadata']['file_count'] += 1
            
            # Extension-statistik
            if file_ext not in statistics['file_extensions']:
                statistics['file_extensions'][file_ext] = 0
            statistics['file_extensions'][file_ext] += 1
            
            # Filtyp-statistik
            if file_type not in statistics['file_types']:
                statistics['file_types'][file_type] = 0
            statistics['file_types'][file_type] += 1
            
            # St√∂rsta fil
            if file_size > statistics['largest_file']['size']:
                statistics['largest_file'] = {
                    'name': file_path,
                    'size': file_size
                }
            
            # Optimerad fil-info f√∂r import
            file_info = {
                'name': filename,
                'path': file_path,
                'relative_path': f"{relative_dir_path}/{filename}" if relative_dir_path else filename,  # NY
                'parent_directory': relative_dir_path,  # NY: f√∂r√§ldermapp
                'extension': file_ext,
                'size': file_size,
                'type': file_type,  # NY: kategoriserad typ
                'modified': datetime.fromtimestamp(file_stat.st_mtime).isoformat(),
                'created': datetime.fromtimestamp(file_stat.st_ctime).isoformat()
            }
            
            tree_node['files'].append(file_info)
            
            return file_size
            
        except (OSError, IOError) as e:
            if not HAS_TQDM:
                print(f"‚ö†Ô∏è Kunde inte l√§sa fil {file_path}: {e}")
            return 0
    
    def _save_checkpoint(self, tree_data: Dict, processed_paths: set, start_time: datetime):
        """Spara checkpoint f√∂r √•terupptagning"""
        
        checkpoint_data = {
            'tree_data': tree_data,
            'processed_paths': processed_paths,
            'start_time': start_time,
            'checkpoint_time': datetime.now().isoformat()
        }
        
        try:
            with open(self.checkpoint_file, 'wb') as f:
                pickle.dump(checkpoint_data, f)
            
            if not HAS_TQDM:
                print(f"üíæ Checkpoint sparad: {len(processed_paths)} kataloger, {tree_data['statistics']['total_files']} filer")
                
        except Exception as e:
            if not HAS_TQDM:
                print(f"‚ö†Ô∏è Kunde inte spara checkpoint: {e}")
    
    def ask_for_customer_level(self, tree: Dict, max_attempts: int = 4) -> List[str]:
        """
        Interaktivt hitta r√§tt niv√• f√∂r kundmappar
        """
        if not sys.stdin.isatty():
            print("‚ö†Ô∏è Inte en interaktiv terminal - hoppar √∂ver kundmapp-detektering")
            return []
        
        def get_folders_at_level(node, current_level, target_level):
            """H√§mta alla mappar p√• en specifik niv√•"""
            if current_level == target_level:
                return list(node.get('children', {}).keys())
            
            folders = []
            for child in node.get('children', {}).values():
                folders.extend(get_folders_at_level(child, current_level + 1, target_level))
            return folders
        
        print("\nüóÇÔ∏è KUNDMAPP-DETEKTERING")
        print("L√•t oss hitta r√§tt niv√• f√∂r dina kundmappar...")
        
        for level in range(max_attempts):
            folders = get_folders_at_level(tree, 0, level)
            
            if not folders:
                print(f"üìÅ Niv√• {level}: Inga mappar hittades")
                continue
            
            print(f"\nüìÅ Niv√• {level} inneh√•ller {len(folders)} mappar:")
            
            # Visa f√∂rsta 10 mappar
            display_folders = folders[:10]
            for i, folder in enumerate(display_folders, 1):
                print(f"   {i:2d}. {folder}")
            
            if len(folders) > 10:
                print(f"   ... och {len(folders) - 10} till")
            
            # Fr√•ga anv√§ndaren
            while True:
                response = input(f"\n‚ùì √Ñr niv√• {level} din grundniv√• f√∂r kunder? (j/n/skip): ").lower().strip()
                
                if response in ['j', 'ja', 'y', 'yes']:
                    print(f"‚úÖ Anv√§nder niv√• {level} som kundniv√•")
                    # SORTERA ALFABETISKT innan returnering - FIX #1
                    sorted_folders = sorted(folders, key=str.lower)
                    return sorted_folders
                elif response in ['n', 'nej', 'no']:
                    print(f"‚û°Ô∏è Forts√§tter till n√§sta niv√•...")
                    break
                elif response in ['skip', 's']:
                    print(f"‚è≠Ô∏è Hoppar √∂ver kundmapp-detektering")
                    return []
                else:
                    print("‚ùå Svara j (ja), n (nej) eller skip")
        
        print(f"‚ö†Ô∏è Ingen l√§mplig kundniv√• hittades efter {max_attempts} f√∂rs√∂k")
        return []
    
    def generate_disk_label(self, disk_name: str, tree_data: Dict, output_file: str, safe_name: str) -> str:
        """
        Generera en 50x80mm label med QR-kod och kundlista - FIXED VERSION
        """
        print(f"üè∑Ô∏è Startar label-generering f√∂r: '{disk_name}'")
        
        # Kontrollera dependencies
        if not HAS_LABEL_SUPPORT:
            print(f"‚ùå QR-kod/PIL moduler saknas")
            print("üí° Installera: pip install qrcode[pil] pillow")
            return None
        
        try:
            import qrcode
            from PIL import Image, ImageDraw, ImageFont
            print("‚úÖ QR-kod och PIL moduler laddade")
        except ImportError as e:
            print(f"‚ùå Import-fel: {e}")
            return None
        
        # Dimensioner f√∂r 50x80mm vid 300 DPI (st√•ende format)
        width_mm, height_mm = 50, 80
        dpi = 900
        width_px = int(width_mm * dpi / 25.4)
        height_px = int(height_mm * dpi / 25.4)
        
        print(f"üìè Label-storlek: {width_px}x{height_px} pixels ({width_mm}x{height_mm}mm)")
        
        # Skapa bild
        img = Image.new('RGB', (width_px, height_px), 'white')
        header = Image.new('RGB', (height_px, int(width_px / 3)), 'white')
        draw = ImageDraw.Draw(img)
        drawHeader = ImageDraw.Draw(header)
        print("‚úÖ Grundbild skapad")
        
        # Marginaler
        margin = 10
        content_width = width_px - (2 * margin)
        
        # F√∂rs√∂k ladda font med olika storlekar
        def load_fonts():
            font_paths = [
                "/System/Library/Fonts/Helvetica.ttc",  # macOS
                "/System/Library/Fonts/Arial.ttf",      # macOS fallback
                "C:/Windows/Fonts/arial.ttf",           # Windows
                "/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf",  # Linux
            ]
            
            fonts = {}
            for size_name, base_size in [('header', 250), ('title', 32*3), ('text', 20*3), ('small', 16*3), ('tiny', 14*3)]:
                font_loaded = False
                for path in font_paths:
                    try:
                        fonts[size_name] = ImageFont.truetype(path, base_size)
                        font_loaded = True
                        break
                    except (OSError, IOError):
                        continue
                
                if not font_loaded:
                    fonts[size_name] = ImageFont.load_default()
            
            return fonts
        
        fonts = load_fonts()
        print("‚úÖ Fonts laddade")
        
        # Helper funktion f√∂r att f√• text-dimensioner
        def get_text_size(text, font):
            try:
                bbox = draw.textbbox((0, 0), text, font=font)
                return bbox[2] - bbox[0], bbox[3] - bbox[1]
            except:
                # Fallback f√∂r √§ldre PIL versioner
                return draw.textsize(text, font)
        
        # 1. Rita rubrik (disk-namn) - anpassa l√§ngd automatiskt
        current_y = margin
        display_name = disk_name
        
        # Hitta passande rubrik-storlek
        title_font = fonts['title']
        header_font = fonts['header']
        while len(display_name) > 0:
            text_width, text_height = get_text_size(display_name, title_font)
            if text_width <= content_width:
                break
            # F√∂rkorta texten
            display_name = display_name[:-1]
        
        if len(display_name) < len(disk_name):
            display_name = display_name.rstrip() + "..."
        
        # Centrera rubrik
        text_width, text_height = get_text_size(display_name, title_font)
        title_x = (width_px - text_width) // 2
        draw.text((title_x, current_y), display_name, fill='black', font=title_font)
        drawHeader.text((30, 180), display_name, fill='black', font=header_font)
        current_y += text_height + 30
        print(f"‚úÖ Rubrik ritad: '{display_name}'")
        
        # 2. Generera och placera QR-kod - FIX #2: S√§tt storlek INNAN QR-kod generering
        qr_max_size = min(content_width // 3, 70)  # FLYTTA DENNA RAD UPP!
        
        qr_y = current_y  # Spara QR-kodens startposition
        try:
            qr_url = f"https://coldstorage.enproduktionsbyra.se/disks/{safe_name}"
            print(f"üîó Skapar QR-kod f√∂r: {qr_url}")
            
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=3,  # Mindre box_size f√∂r att spara plats
                border=1,
            )
            qr.add_data(qr_url)
            qr.make(fit=True)
            
            qr_img = qr.make_image(fill_color="black", back_color="white")
            
            # Skala QR-koden till r√§tt storlek
            qr_img = qr_img.resize((750, 750), Image.Resampling.LANCZOS)
            
            # Placera QR-kod i √∂vre h√∂gra h√∂rnet
            qr_x = width_px - 750 - margin
            img.paste(qr_img, (qr_x, qr_y))

            qr_x = height_px - int(width_px / 3) + 30
            qr_img = qr_img.resize((int(width_px / 3) - 60, int(width_px / 3)- 60), Image.Resampling.LANCZOS)
            header.paste(qr_img, (qr_x, 30))
            
            print(f"‚úÖ QR-kod placerad ({qr_max_size}x{qr_max_size}px)")
            
            # S√§tt text-start i h√∂jd med QR-koden
            text_start_y = qr_y
                
        except Exception as e:
            print(f"‚ùå Fel vid QR-kod generering: {e}")
            text_start_y = current_y
        
        # 3. Hitta kundmappar
        try:
            customer_folders = self.ask_for_customer_level(tree_data['tree'])
            print(f"üìÅ Hittade {len(customer_folders)} kundmappar")
        except Exception as e:
            print(f"‚ö†Ô∏è Fel vid kundmapp-detektering: {e}")
            customer_folders = []
        
        # 4. Rita inneh√•ll (kundlista eller statistik) - MAXIMAL BREDD OCH H√ñJD
        if customer_folders:
            # B√∂rja texten i h√∂jd med QR-koden (inte under den!)
            current_y = text_start_y
            
            # Ber√§kna maximal textbredd - QR-koden tar ca 1/3, s√• vi kan anv√§nda 2/3
            qr_max_size = min(content_width // 3, 70)
            text_max_width = width_px - qr_max_size - (margin * 2) - 10  # Extra marginal fr√•n QR-kod
            print(f"üìè Textbredd: {text_max_width}px (QR-kod: {qr_max_size}px)")
            
            # Rita kundlista rubrik p√• v√§nstra sidan bredvid QR-koden
            draw.text((margin, current_y), "Kunder/Projekt:", fill='black', font=fonts['text'])
            current_y += get_text_size("Kunder/Projekt:", fonts['text'])[1] + 5
            
            # Nu har vi HELA resten av bilden att fylla!
            total_available_height = height_px - current_y - margin
            print(f"üéØ MAXIMAL tillg√§nglig h√∂jd: {total_available_height}px (fr√•n y={current_y} till y={height_px-margin})")
            
            # R√§kna f√∂rst hur m√•nga mappar vi har totalt
            total_folders = len(customer_folders)
            print(f"üìä Ska f√∂rdela {total_folders} mappar p√• {total_available_height}px")
            
            # Ber√§kna optimal radavst√•nd f√∂r att fylla EXAKT hela h√∂jden
            if total_folders > 0:
                optimal_line_height = total_available_height / total_folders
                # Men inte mindre √§n 8px per rad (annars blir det ol√§sligt)
                actual_line_height = max(8, int(optimal_line_height))
            else:
                actual_line_height = 15
            
            print(f"üìè Ber√§knad radavst√•nd: {optimal_line_height:.1f}px, anv√§nd: {actual_line_height}px")
            
            # V√§lj font-storlek baserat p√• radavst√•nd
            if actual_line_height >= 18:
                customer_font = fonts['small']  # 16pt - stor font
            elif actual_line_height >= 14:
                customer_font = fonts['tiny']   # 14pt - medel font  
            else:
                customer_font = ImageFont.load_default()  # Minsta font
            
            print(f"‚úÖ Vald font f√∂r radavst√•nd {actual_line_height}px")
            
            customers_shown = 0
            
            # Rita ALLA mappar med samma font och radavst√•nd - VERKLIGEN ALLA!
            for folder in customer_folders:
                # Mjukare kontroll - bara se till att texten inte g√•r utanf√∂r bilden
                if current_y > height_px - margin - 8:  # L√§mna bara 8px marginal
                    print(f"üõë VERKLIG STOPP vid y={current_y}, hade planerat {actual_line_height}px radavst√•nd")
                    break
                
                # INGEN TRUNKERING - anv√§nd full bredd!
                # Testa om hela namnet f√•r plats
                full_text = f"‚Ä¢ {folder}"
                text_width = get_text_size(full_text, customer_font)[0]
                
                if text_width <= text_max_width:
                    # Hela namnet f√•r plats!
                    display_text = full_text
                else:
                    # Bara om det verkligen inte f√•r plats, f√∂rkorta minimalt
                    display_folder = folder
                    while len(display_folder) > 5:
                        test_text = f"‚Ä¢ {display_folder}..."
                        if get_text_size(test_text, customer_font)[0] <= text_max_width:
                            break
                        display_folder = display_folder[:-1]
                    display_text = f"‚Ä¢ {display_folder}..."
                
                # Rita mappen
                draw.text((margin, current_y), display_text, fill='black', font=customer_font)
                
                # Dynamisk radavst√•nd - anv√§nd mindre space om vi b√∂rjar f√• ont om plats
                remaining_folders = len(customer_folders) - customers_shown - 1
                remaining_height = height_px - margin - current_y - 8
                
                if remaining_folders > 0 and remaining_height > 0:
                    # Anpassa radavst√•ndet f√∂r att f√• plats med resten
                    dynamic_line_height = min(actual_line_height, remaining_height // remaining_folders)
                    dynamic_line_height = max(6, dynamic_line_height)  # Minst 6px
                    current_y += dynamic_line_height
                else:
                    current_y += actual_line_height
                
                customers_shown += 1
                
                # Debug varje 15:e rad
                if customers_shown % 15 == 0:
                    remaining = height_px - margin - current_y
                    print(f"üìç Rad {customers_shown}/{len(customer_folders)}: y={current_y}, kvar={remaining}px")
            
            final_remaining = height_px - margin - current_y
            print(f"üèÅ F√ñRSTA OMG√ÖNGEN: {customers_shown}/{total_folders} mappar, {final_remaining}px outnyttjat")
            
            # Om vi FORTFARANDE har mappar kvar, pressa in dem med minimal spacing
            if customers_shown < total_folders:
                print(f"üö® FORTFARANDE {total_folders - customers_shown} mappar kvar! Pressar in dem...")
                
                micro_font = ImageFont.load_default()
                minimal_spacing = 6  # Absolut minimum
                
                for folder in customer_folders[customers_shown:]:
                    # H√•rdare kontroll - verkligen sista pixlarna
                    if current_y + minimal_spacing > height_px - margin:
                        print(f"üíÄ ABSOLUT STOPP vid mapp {customers_shown}: '{folder}'")
                        break
                    
                    # Kortare namn f√∂r att f√• plats
                    short_text = f"‚Ä¢ {folder[:20]}..." if len(folder) > 20 else f"‚Ä¢ {folder}"
                    
                    draw.text((margin, current_y), short_text, fill='black', font=micro_font)
                    current_y += minimal_spacing
                    customers_shown += 1
                
                super_final_remaining = height_px - margin - current_y
                print(f"üí™ SUPERKAMP: {customers_shown}/{total_folders} mappar, {super_final_remaining}px kvar")
            
        else:
            # Rita disk-statistik ist√§llet
            stats = tree_data['statistics']
            
            current_y = draw_wrapped_text("Inneh√•ll:", margin, current_y, 
                                         content_width, fonts['text'])
            current_y += 5
            
            # Statistik-rader
            stat_lines = [
                f"üìÅ {stats['total_directories']:,} mappar",
                f"üìÑ {stats['total_files']:,} filer"
            ]
            
            # L√§gg till filtyp-info om det finns plats
            if stats.get('file_types'):
                sorted_types = sorted(stats['file_types'].items(), 
                                    key=lambda x: x[1], reverse=True)
                top_type = sorted_types[0]
                stat_lines.append(f"üîù {top_type[0]}: {top_type[1]:,}")
            
            for stat_line in stat_lines:
                if current_y + get_text_size(stat_line, fonts['small'])[1] > height_px - margin:
                    break
                current_y = draw_wrapped_text(stat_line, margin + 5, current_y,
                                             content_width, fonts['small'])
                current_y += 3
            
            print("‚úÖ Disk-statistik ritad")
        
        # 5. Spara label
        try:
            label_file = output_file.replace('.json', '_label.jpg')
            img.save(label_file, 'JPEG', dpi=(dpi, dpi), quality=100, speed=0, compress_level=0)
            label_file_header = output_file.replace('.json', '_label_header.jpg')
            header.save(label_file_header, 'JPEG', dpi=(dpi, dpi), quality=100, speed=0, compress_level=0)
            
            if os.path.exists(label_file):
                file_size = os.path.getsize(label_file)
                print(f"‚úÖ Label sparad: {label_file}")
                print(f"üìè Storlek: {width_mm}x{height_mm}mm ({width_px}x{height_px}px, {file_size:,} bytes)")
                return label_file
            else:
                print(f"‚ùå Label-fil skapades inte: {label_file}")
                return None
                
        except Exception as e:
            print(f"‚ùå Fel vid sparning av label: {e}")
            return None
    
    def _save_tree_data(self, tree_data: Dict, output_file: str):
        """Spara tr√§d-data till fil"""
        
        print(f"üíæ Sparar tr√§d-data till: {output_file}")
        
        # Skapa output-katalog om den inte finns
        output_dir = os.path.dirname(output_file)
        if output_dir and not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        # Spara som JSON
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(tree_data, f, indent=2, ensure_ascii=False)
        
        file_size = os.path.getsize(output_file)
        print(f"‚úÖ Tr√§d-data sparad ({file_size / 1024:.1f} KB)")
        print(f"üöÄ Optimerad f√∂r Cold Storage v2 import!")

def main():
    parser = argparse.ArgumentParser(description='Optimized Tree Indexer f√∂r Cold Storage v2')
    
    parser.add_argument('path', help='S√∂kv√§g att scanna')
    parser.add_argument('--output', '-o', help='Output JSON-fil')
    parser.add_argument('--extensions', nargs='*', help='Inkludera bara dessa filextensions (t.ex. .jpg .cr3)')
    parser.add_argument('--exclude', nargs='*', help='Exkludera patterns (regex)')
    parser.add_argument('--no-label', action='store_true', help='Hoppa √∂ver label-generering')
    parser.add_argument('--foto-only', action='store_true', help='Bara foto/video-filer')
    parser.add_argument('--no-resume', action='store_true', help='Starta fr√•n b√∂rjan (ignorera checkpoint)')
    parser.add_argument('--checkpoint-interval', type=int, default=1000, help='Spara checkpoint var N kataloger (default: 1000)')
    
    args = parser.parse_args()
    
    # Setup output files - anv√§nd disk-namn ist√§llet f√∂r timestamp
    if not args.output:
        # Skapa filnamn baserat p√• disk-namn
        disk_name = os.path.basename(args.path.rstrip('/')) or 'UnknownDisk'
        # Rensa ogiltiga tecken f√∂r filnamn
        safe_name = re.sub(r'[^\w\-_\.]', '_', disk_name)
        output_file = f"{safe_name}.json"
    else:
        output_file = args.output
        # NYTT: Extrahera safe_name fr√•n output_file namnet
        safe_name = os.path.basename(output_file).replace('.json', '')
        safe_name = re.sub(r'[^\w\-_\.]', '_', safe_name)
    
    extensions = None
    if args.foto_only:
        extensions = [
            '.cr2', '.cr3', '.nef', '.arw', '.dng', '.iiq', '.3fr', '.orf', '.rw2',  # RAW
            '.jpg', '.jpeg', '.png', '.tiff', '.tif', '.psd', '.ai',  # Standard
            '.mp4', '.mov', '.avi', '.r3d', '.braw', '.mxf'  # Video
        ]
    elif args.extensions:
        extensions = [ext if ext.startswith('.') else f'.{ext}' for ext in args.extensions]
    
    exclude_patterns = args.exclude or None
    
    # K√∂r optimerad scanning
    indexer = OptimizedTreeIndexer()
    
    try:
        print(f"üöÄ Optimized Tree Indexer f√∂r Cold Storage v2")
        if not HAS_TQDM:
            print("üí° Tips: Installera 'tqdm' f√∂r visuell progressbar: pip install tqdm")
        if not HAS_LABEL_SUPPORT and not args.no_label:
            print("üí° Tips: Installera 'qrcode[pil] pillow' f√∂r automatisk label-generering")
        
        tree_data = indexer.scan_directory_tree(
            args.path,
            output_file,
            extensions,
            exclude_patterns,
            resume=not args.no_resume,
            checkpoint_interval=args.checkpoint_interval
        )
        
        # Generera disk-label EFTER scanning
        label_file = None
        if not args.no_label:
            if not HAS_LABEL_SUPPORT:
                print("‚ö†Ô∏è Label-generering ej tillg√§nglig - installera dependencies:")
                print("   pip install qrcode[pil] pillow")
            else:
                try:
                    # NYTT: Anv√§nd safe_name som disk_name f√∂r konsistent namngivning
                    disk_name = safe_name.replace('_', ' ').title()  # G√∂r det lite snyggare f√∂r labeln
                    print(f"üè∑Ô∏è F√∂rs√∂ker skapa label f√∂r: {disk_name} (URL: {safe_name})")
                    
                    label_file = indexer.generate_disk_label(disk_name, tree_data, output_file, safe_name)
                    
                    if label_file and os.path.exists(label_file):
                        print(f"‚úÖ Label skapad framg√•ngsrikt: {label_file}")
                    else:
                        print("‚ùå Label-fil kunde inte skapas")
                        
                except Exception as e:
                    print(f"‚ùå Fel vid label-generering: {e}")
                    print(f"üîç Fullst√§ndig felmeddelande: {type(e).__name__}: {str(e)}")
                    import traceback
                    traceback.print_exc()
        else:
            print("‚è≠Ô∏è Hoppar √∂ver label-generering (--no-label)")
        
        print(f"\nüìã SLUTRESULTAT:")
        print(f"   üìÅ Mappar: {tree_data['statistics']['total_directories']:,}")
        print(f"   üìÑ Filer: {tree_data['statistics']['total_files']:,}")
        print(f"   üìè Max djup: {tree_data['statistics']['max_depth']} niv√•er")
        print(f"   üóÇÔ∏è Filtyper: {len(tree_data['statistics']['file_types'])}")
        
        print(f"\n‚úÖ F√§rdigt! Optimerad f√∂r Cold Storage v2 import:")
        print(f"   üìÑ JSON: {output_file}")
        if label_file and os.path.exists(label_file):
            print(f"   üè∑Ô∏è  Label: {label_file}")
        elif not args.no_label:
            print(f"   ‚ö†Ô∏è  Label kunde inte skapas")
        print(f"üí° Ladda upp JSON-filen via Cold Storage web-interface")
        
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è Scanning avbruten - checkpoint sparad f√∂r √•terupptagning")
        print(f"üí° K√∂r samma kommando igen f√∂r att forts√§tta")
        return 1
    except Exception as e:
        print(f"‚ùå Fel: {e}")
        return 1
    
    return 0

if __name__ == '__main__':
    exit(main())